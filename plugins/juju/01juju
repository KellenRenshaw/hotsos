#!/usr/bin/python3
import re
import os
import sys

from common import helpers

# HOTSOS GLOBALS
VERBOSITY_LEVEL = int(os.environ.get('VERBOSITY_LEVEL', 0))
DATA_ROOT = os.environ.get('DATA_ROOT', '/')

JUJU_LOG_PATH = os.path.join(DATA_ROOT, "var/log/juju")

machine_running = set()
machine_stopped = set()
app_local = set()
unit_local = set()
unit_local_not_running = set()
unit_nonlocal = set()
app_nonlocal = {}
unit_local_not_running_filtered = set()
ps_units = set()
log_units = set()
ps_machines = set()
log_machines = set()


def get_app_from_unit(unit):
    ret = re.compile(r"([0-9a-z\-]+)-[0-9]+.*").match(unit)
    if ret:
        return ret[1]


def get_unit_version(unit):
    ret = re.compile(r"[0-9a-z\-]+-([0-9]+).*").match(unit)
    if ret:
        return int(ret[1])


print("juju:")
if not os.path.exists(JUJU_LOG_PATH):
    print("  - $data_source_dir not found - skipping juju info")
    sys.exit(0)

for line in helpers.get_ps():
    if "unit-" in line:
        ret = re.compile(r".+unit-([0-9a-z\-]+-[0-9]+).*").match(line)
        if ret:
            ps_units.add(ret[1])

for f in os.listdir(JUJU_LOG_PATH):
    ret = re.compile(r"unit-(.+)\.log.*").match(f)
    if ret:
        log_units.add(ret[1])

combined_units = ps_units.union(log_units)

for line in helpers.get_ps():
    if "machine-" in line:
        ret = re.compile(r".+machine-([0-9]+).*").match(line)
        if ret:
            ps_machines.add(ret[1])

for f in os.listdir(JUJU_LOG_PATH):
    ret = re.compile(r"machine-([0-9]+)\.log.*").match(f)
    if ret:
        log_machines.add(ret[1])

combined_machines = ps_machines.union(log_machines)

for machine in combined_machines:
    agent_conf = os.path.join(DATA_ROOT,
                              "var/lib/juju/agents/machine-{}/agent.conf".
                              format(machine))
    version = "unknown"
    if os.path.exists(agent_conf):
        for line in open(agent_conf).readlines():
            ret = re.compile(r"upgradedToVersion:\s+(.+)").match(line)
            if ret:
                version = ret[1]

    if machine in ps_machines:
        machine_running.add("{} (version={})".format(machine, version))
    else:
        machine_stopped.add(machine)

for unit in combined_units:
    if unit in log_units:
        if unit in ps_units:
            app_local.add(unit.partition('-')[2])
            unit_local.add(unit)
        else:
            unit_local_not_running.add(unit)
    else:
        # i.e. it is running but there is no log file in /var/log/juju so
        # it is likely running in a container
        app = get_app_from_unit(unit)
        if app:
            version = get_unit_version(unit)
            if version is not None:
                if app in app_nonlocal:
                    if version > app_nonlocal[app]:
                        app_nonlocal[app] = version
                else:
                    app_nonlocal[app] = version

        unit_nonlocal.add(unit)

# remove units from unit_local_not_running that are just old versions of
# the one currently running
for unit in unit_local_not_running:
    app = get_app_from_unit(unit)
    if not app or app not in app_local:
        unit_local_not_running_filtered.add(unit)

# dedup unit_nonlocal
unit_nonlocal_dedup = set()
for unit in unit_nonlocal:
    app = get_app_from_unit(unit)
    version = app_nonlocal[app]
    if version == get_unit_version(unit):
        unit_nonlocal_dedup.add(unit)

print("  machines:")
if machine_running:
    print("    running:")
    for m in machine_running:
        print("      - {}".format(m))

if machine_stopped:
    print("    stopped:")
    for m in machine_stopped:
        print("      - {}".format(m))


print("  units:")
print("    running:")
for unit in sorted(unit_local):
    print("      - {}".format(unit))
print("    stopped:")
for unit in sorted(unit_local_not_running_filtered):
    print("      - {}".format(unit))
print("    non-local (e.g. lxd):")
for unit in sorted(unit_nonlocal_dedup):
    print("      - {}".format(unit))
