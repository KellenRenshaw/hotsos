#!/usr/bin/python3
import os

from common import (
    constants,
    searchtools,
    plugin_yaml,
)
from common.known_bugs_utils import add_known_bug
from openstack_common import (
    OPENSTACK_AGENT_ERROR_KEY_BY_TIME as AGENT_ERROR_KEY_BY_TIME,
    CINDER_LOGS,
    GLANCE_LOGS,
    HEAT_LOGS,
    KEYSTONE_LOGS,
    NEUTRON_LOGS,
    NOVA_LOGS,
    OCTAVIA_LOGS,
)
from openstack_exceptions import (
    OSLO_DB_EXCEPTIONS,
    OSLO_MESSAGING_EXCEPTIONS,
)
from openstack_utils import (
    get_agent_exceptions,
)

AGENT_LOG_ISSUES = {}

AGENT_NAMES = {"cinder": ["cinder-scheduler", "cinder-volume"],
               "glance": ["glance-api"],
               "heat": ["heat-engine", "heat-api", "heat-api-cfn"],
               "keystone": ["keystone"],
               "neutron": ["neutron-openvswitch-agent", "neutron-dhcp-agent",
                           "neutron-l3-agent", "neutron-server"],
               "nova": ["nova-compute", "nova-scheduler", "nova-conductor",
                        "nova-api-os-compute", "nova-api-wsgi"],
               "octavia": ["octavia-api", "octavia-worker",
                           "octavia-health-manager", "octavia-housekeeping"],
               }

AGENT_LOGS = {"cinder": CINDER_LOGS,
              "glance": GLANCE_LOGS,
              "heat": HEAT_LOGS,
              "keystone": KEYSTONE_LOGS,
              "neutron": NEUTRON_LOGS,
              "nova": NOVA_LOGS,
              "octavia": OCTAVIA_LOGS,
              }

AGENT_EXCEPTIONS_COMMON = [r"(AMQP server on .+ is unreachable)",
                           r"(amqp.exceptions.ConnectionForced):",
                           r"(OSError: Server unexpectedly closed connection)",
                           r"(ConnectionResetError: .+)"]
# assume all agents use these so add to all
for exc in OSLO_DB_EXCEPTIONS + OSLO_MESSAGING_EXCEPTIONS:
    AGENT_EXCEPTIONS_COMMON.append(r"({})".format(exc))

# The following must be ERROR log level
AGENTS_EXCEPTIONS = {"cinder": [] + AGENT_EXCEPTIONS_COMMON,
                     "glance": [] + AGENT_EXCEPTIONS_COMMON,
                     "heat": [] + AGENT_EXCEPTIONS_COMMON,
                     "keystone": [] + AGENT_EXCEPTIONS_COMMON,
                     "nova": [r"(nova.exception.\S+):"] +
                     AGENT_EXCEPTIONS_COMMON,
                     "neutron": [] + AGENT_EXCEPTIONS_COMMON,
                     "octavia": [] + AGENT_EXCEPTIONS_COMMON,
                     }

# The following can be any log level
AGENTS_ISSUES = {"neutron": [r"(OVS is dead).", r"(RuntimeError):"]}

# NOTE: only LP bugs supported for now
BUG_SEARCH_TERMS = {"1896506": (".+Unknown configuration entry 'no_track' for "
                                "ip address - ignoring.*")}


def add_agent_terms(searcher, service):
    data_source_template = os.path.join(constants.DATA_ROOT,
                                        AGENT_LOGS[service], '{}.log')
    if constants.USE_ALL_LOGS:
        data_source_template = "{}*".format(data_source_template)

    for agent in AGENT_NAMES[service]:
        data_source = data_source_template.format(agent)
        for exc_msg in AGENTS_EXCEPTIONS[service]:
            rexpr = r"^([0-9\-]+) (\S+) .+{}.*".format(exc_msg)
            searcher.add_search_term(rexpr, [1, 2, 3], data_source, tag=agent,
                                     hint=exc_msg)

        for msg in AGENTS_ISSUES.get(service, []):
            rexpr = r"^([0-9\-]+) (\S+) .+{}.*".format(msg)
            searcher.add_search_term(rexpr, [1, 2, 3], data_source, tag=agent,
                                     hint=msg)


def add_bug_search_terms(searcher):
    data_source = os.path.join(constants.DATA_ROOT, 'var/log/syslog')
    if constants.USE_ALL_LOGS:
        data_source = "{}*".format(data_source)

    for tag in BUG_SEARCH_TERMS:
        searcher.add_search_term(BUG_SEARCH_TERMS[tag], [0], data_source,
                                 tag=tag)


def process_bug_results(results):
    for tag in BUG_SEARCH_TERMS:
        if results.find_by_tag(tag):
            add_known_bug(tag)


def process_agent_results(results, service):
    for agent in AGENT_NAMES[service]:
        e = get_agent_exceptions(results.find_by_tag(agent),
                                 AGENT_ERROR_KEY_BY_TIME)
        if e:
            if service not in AGENT_LOG_ISSUES:
                AGENT_LOG_ISSUES[service] = {}

            AGENT_LOG_ISSUES[service][agent] = e


def get_agents_issues():
    """
    Collect information about Openstack agents. This includes errors,
    exceptions and known bugs.
    """
    s = searchtools.FileSearcher()

    # Add search terms for everything at once
    for service in AGENT_NAMES:
        add_agent_terms(s, service)

    add_bug_search_terms(s)

    # execute search
    results = s.search()

    # process the results
    for service in AGENT_NAMES:
        process_agent_results(results, service)

    process_bug_results(results)


if __name__ == "__main__":
    get_agents_issues()
    if AGENT_LOG_ISSUES:
        AGENT_LOG_ISSUES = {"agent-issues": AGENT_LOG_ISSUES}
        plugin_yaml.dump(AGENT_LOG_ISSUES)
