#!/usr/bin/python3
import re
import os
import sys
import yaml

from common import helpers

# HOTSOS GLOBALS
VERBOSITY_LEVEL = int(os.environ.get('VERBOSITY_LEVEL', 0))
DATA_ROOT = os.environ.get('DATA_ROOT', '/')
MASTER_YAML_OUT = os.environ.get('MASTER_YAML_OUT')

CONFIG = {"nova": [{"path": os.path.join(DATA_ROOT, "etc/nova/nova.conf"),
                    "key": "my_ip"}],
          "neutron": [{"path":
                       os.path.join(DATA_ROOT, "etc/neutron/plugins/ml2/"
                                    "openvswitch_agent.ini"),
                       "key": "local_ip"}]}
CONFIG_INFO = {}
NET_NS_INFO = {}
VM_PORT_HEALTH = {}


def find_line(key, lines):
    for i, line in enumerate(lines):
        if re.compile(key).match(line):
            return i

    return None


def get_config_network_info():
    for svc in CONFIG:
        for info in CONFIG[svc]:
            data_source = info["path"]
            key = info["key"]
            if not os.path.exists(data_source):
                continue

            ip_address = None
            for line in open(data_source).readlines():
                ret = re.compile(r"^\s*{}\s*=\s*([0-9\.]+).*".
                                 format(key)).match(line)
                if ret:
                    ip_address = ret[1]
                    lines = helpers.get_ip_addr()
                    iface = None
                    a = find_line(r".+{}.+".format(ip_address), lines)
                    while True:
                        ret = re.compile(r"^([0-9]+):\s+([a-z0-9\-@.]+):.+"
                                         ).match(lines[a])
                        if ret:
                            iface = ret[2]
                            break

                        a = a-1

                    if iface:
                        break

            if svc not in CONFIG_INFO:
                CONFIG_INFO[svc] = {}

            if ip_address:
                CONFIG_INFO[svc][key] = {"address": ip_address,
                                         "interface": iface}
            else:
                CONFIG_INFO[svc][key] = None


def get_ns_info():
    for line in helpers.get_ip_netns():
        ret = re.compile(r"^([a-z0-9]+)-([0-9a-z\-]+)\s+.+").match(line)
        if ret:
            if ret[1] in NET_NS_INFO:
                NET_NS_INFO[ret[1]] += 1
            else:
                NET_NS_INFO[ret[1]] = 1


def get_instances_info():
    openstack = yaml.safe_load(open(MASTER_YAML_OUT)).get("openstack", {})
    instances = openstack.get("instances")
    if instances is None:
        return

    guest_info = {}
    ps_output = helpers.get_ps()
    for uuid in instances:
        for line in ps_output:
            ret = re.compile(r".+guest=(\S+),.+product=OpenStack Nova.+uuid={}"
                             r".+".format(uuid)).match(line)
            if ret:
                guest = ret[1]
                if guest not in guest_info:
                    guest_info[uuid] = {"ports": []}

                ret = re.compile(r"mac=([a-z0-9:]+)").findall(line)
                if ret:
                    if "ports" not in guest_info[uuid]:
                        guest_info[uuid]["ports"] = []

                    for port in ret:
                        guest_info[uuid]["ports"].append({"mac": port,
                                                          "health": {}})

    return guest_info


def get_port_stats(name=None, mac=None):
    ip_link_show = helpers.get_ip_link_show()
    mark = -1
    stats_raw = ""

    if mac:
        libvirt_mac = "fe" + mac[2:]

    for i, line in enumerate(ip_link_show):
        if mark < 0:
            if mac:
                for _mac in [mac, libvirt_mac]:
                    ret = re.compile(r"^\s+link/ether\s+{}\s+.+".format(_mac)
                                     ).match(line)
                    if ret:
                        mark = i
                        break
            else:
                ret = re.compile(r"^[0-9]+:\s+{}:\s+.+".format(name)
                                 ).match(line)
                if ret:
                    mark = i
        else:
            ret = re.compile(r"^[0-9]+:\s+.+").match(line)
            if ret:
                for n in range(mark, i):
                    stats_raw += ip_link_show[n]

                break

    stats = {}
    if stats_raw:
        stats_raw = stats_raw.split("\n")
        for i, line in enumerate(stats_raw):
            ret = re.compile(r"\s+[RT]X:\s+.+").findall(line)
            if ret:
                ret = re.compile(r"\s*([a-z]+)\s*").findall(line)
                if ret:
                    for j, column in enumerate(ret):
                        for key in ["dropped", "errors"]:
                            if column == key:
                                packets = int(stats_raw[i + 1].split()[j])
                                if not packets:
                                    continue

                                if key in stats:
                                    stats[key] += packets
                                else:
                                    stats[key] = packets

    return stats


def get_instances_port_health():
    instances = get_instances_info()
    if not instances:
        return

    for uuid in instances:
        for port in instances[uuid]['ports']:
            stats = get_port_stats(mac=port["mac"])
            if stats:
                port["health"].update(stats)

    return instances


if __name__ == "__main__":
    if VERBOSITY_LEVEL < 2:
        sys.exit(0)

    get_ns_info()
    get_config_network_info()
    instance_health = get_instances_port_health()

    if not (NET_NS_INFO or CONFIG_INFO or instance_health):
        sys.exit(0)

    print("  network:")

    if NET_NS_INFO:
        print("    namespaces:")
        for label in NET_NS_INFO:
            print("      {}: {}".format(label, NET_NS_INFO[label]))

    if CONFIG_INFO:
        config_port_stats = {}
        print("    config:")
        for svc in CONFIG_INFO:
            svc_info = CONFIG_INFO[svc]
            print("      {}:".format(svc))
            for key in svc_info:
                if svc_info[key] is not None:
                    port = svc_info[key].get("interface")
                    addr = svc_info[key].get("address")
                    print("        {}: {}".format(key, addr))
                    stats = get_port_stats(name=port)
                    if stats:
                        config_port_stats[port] = stats
                else:
                    print("       {}: {}".format(key, "<unset>"))

        if config_port_stats:
            print("    stats:")
            for port in config_port_stats:
                print("      {}:".format(port))
                for key in config_port_stats[port]:
                    data = config_port_stats[port].get(key, -1)
                    if data > 0:
                        print("        {}: {}".format(key, data))

    if instance_health:
        print("  port-health:")
        print("    num-vms-checked: {}".format(len(instance_health)))
        print("    stats:")
        for uuid in instance_health:
            for port in instance_health[uuid]["ports"]:
                mac = port["mac"]
                health = port.get("health", {})
                if not health:
                    continue

                print("      {}:".format(uuid))
                print("        {}:".format(mac))
                for key in health:
                    data = health.get(key, -1)
                    if data > 0:
                        print("          {}: {}".format(key, data))
