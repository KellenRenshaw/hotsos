#!/usr/bin/python3
import re
import os

from collections import OrderedDict

from common import helpers
from openstack_common import OST_PROJECTS

# HOTSOS GLOBALS
VERBOSITY_LEVEL = int(os.environ.get('VERBOSITY_LEVEL', 0))
DATA_ROOT = os.environ.get('DATA_ROOT', '/')


default_pfix_match = r"[A-Z0-9a-z\-\\]+"

# TODO: keep this list up-to-date with SERVICES we care about in the context of
#       openstack.
SERVICES = [r"aodh{}".format(default_pfix_match),
            r"apache{}".format(default_pfix_match),
            r"barbican{}".format(default_pfix_match),
            r"beam.smp",
            r"ceilometer{}".format(default_pfix_match),
            r"ceph-[A-Za-z]+",
            r"cinder{}".format(default_pfix_match),
            r"designate{}".format(default_pfix_match),
            r"glance{}".format(default_pfix_match),
            r"gnocchi{}".format(default_pfix_match),
            r"heat{}".format(default_pfix_match),
            r"horizon",
            r"keepalived{}".format(default_pfix_match),
            r"keystone{}".format(default_pfix_match),
            r"mysqld",
            r"neutron{}".format(default_pfix_match),
            r"nova{}".format(default_pfix_match),
            r"ocatvia{}".format(default_pfix_match),
            r"openstack-dashboard",
            r"ovs{}".format(default_pfix_match),
            r"ovn{}".format(default_pfix_match),
            r"rabbitmq-server",
            r"rados{}".format(default_pfix_match),
            r"swift{}".format(default_pfix_match),
            r"vault{}".format(default_pfix_match),
            r"qemu-system-[A-Z0-9a-z\-_]+"]

# configs that dont use standard /etc/<project>/<project>.conf
OST_ETC_OVERRIDES = {"glance": "glance-api.conf",
                     "swift": "proxy.conf"}


print("openstack:")

releases = {"default": "distro",
            "uca": set(["queens"])}
apt_source_path = os.path.join(DATA_ROOT, "etc/apt/sources.list.d")
if os.path.exists(apt_source_path):
    for source in os.listdir(apt_source_path):
        for line in open(os.path.join(apt_source_path, source)).readlines():
            ret = re.compile(r"(.+cloud.+)").match(line)
            if ret:
                ret = re.compile(r".+-updates/([a-z]+)\s.*").match(line)
                if ret:
                    releases["uca"].add(ret[1])

if releases["uca"]:
    print("  release: {}".format(sorted(releases["uca"], reverse=True)[0]))
else:
    print("  release: {}".format(releases["default"]))


if VERBOSITY_LEVEL >= 2:
    print("  debug-logging-enabled:")
    for proj in OST_PROJECTS:
        if proj in OST_ETC_OVERRIDES:
            path = OST_ETC_OVERRIDES[proj]
        else:
            path = os.path.join(DATA_ROOT, "etc", proj, "{}.conf".format(proj))

        if os.path.exists(path):
            for line in open(path).readlines():
                ret = re.compile(r"^debug\s*=\s*([A-Za-z]+).*").match(line)
                if ret:
                    print("    {}: {}".format(proj, ret[1]))

print("  services:")

openstack_info = {}
for line in helpers.get_ps():
    for svc in SERVICES:
        ret = re.compile(r".+/({})\s+.+".format(svc)).match(line)
        if ret:
            if ret[1] in openstack_info:
                openstack_info[ret[1]] += 1
            else:
                openstack_info[ret[1]] = 1

openstack_info_sorted = OrderedDict(sorted(openstack_info.items()))
for svc in openstack_info_sorted:
    print("    - {} ({})".format(svc, openstack_info_sorted[svc]))
