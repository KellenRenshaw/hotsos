#!/usr/bin/python3
import re
import os
import subprocess

from uuid import uuid4

# HOTSOS GLOBALS
VERBOSITY_LEVEL = os.environ.get('VERBOSITY_LEVEL', '/')
DATA_ROOT = os.environ.get('DATA_ROOT', '/')
OPENSTACK_SHOW_CPU_PINNING_RESULTS = \
    os.environ.get('OPENSTACK_SHOW_CPU_PINNING_RESULTS', None)


def get_cores(cores):
    """Parse comma-seperated list of core ids into an array. Ranges are
    expanded.
    """
    total = []
    cores = cores.split(',')
    for subcores in cores:
        # expand ranges
        subcores = subcores.partition('-')
        if subcores[1] == '-':
            total += range(int(subcores[0]), int(subcores[2]) + 1)
        else:
            total.append(int(subcores[0]))

    return total


def list_to_str(l, seperator=None):
    """Convert list of any type to string seperated by seperator."""
    if not seperator:
        seperator = ','

    if not l:
        return ""

    return seperator.join([str(e) for e in l])


class OpenstackNovaConfig(object):
    """Openstack Nova service configuration."""

    nova_config = []

    def __init__(self):
        path = os.path.join(DATA_ROOT, "etc/nova/nova.conf")
        if os.path.exists(path):
            self.nova_config = open(path, 'r').readlines()

        self._cpu_dedicated_set = []
        self._cpu_shared_set = []
        self._vcpu_pin_set = []

    @property
    def cpu_dedicated_set(self):
        if self._cpu_dedicated_set:
            return self._cpu_dedicated_set

        for line in self.nova_config:
            expr = r'^cpu_dedicated_set\s*=\s*([0-9\-,]+)'
            ret = re.compile(expr).match(line)
            if ret:
                self._cpu_dedicated_set = get_cores(ret[1])
                return self._cpu_dedicated_set

    @property
    def cpu_shared_set(self):
        if self._cpu_shared_set:
            return self._cpu_shared_set

        for line in self.nova_config:
            expr = r'^cpu_shared_set\s*=\s*([0-9\-,]+)'
            ret = re.compile(expr).match(line)
            if ret:
                self._cpu_shared_set = get_cores(ret[1])
                return self._cpu_shared_set

    @property
    def vcpu_pin_set(self):
        if self._vcpu_pin_set:
            return self._vcpu_pin_set

        for line in self.nova_config:
            expr = r'^vcpu_pin_set\s*=\s*([0-9\-,]+)'
            ret = re.compile(expr).match(line)
            if ret:
                self._vcpu_pin_set = get_cores(ret[1])
                return self._vcpu_pin_set


class KernelConfig(object):
    """ Kernel configuration. """

    kernel_config = []

    def __init__(self):
        path = os.path.join(DATA_ROOT, "proc/cmdline")
        if os.path.exists(path):
            self.kernel_config = open(path, 'r').readlines()

        self._isolcpus = []

    @property
    def isolcpus(self):
        if self._isolcpus:
            return self._isolcpus

        for line in self.kernel_config:
            expr = r'.*\s+isolcpus=([0-9\-,]+)\s*.*'
            ret = re.compile(expr).match(line)
            if ret:
                self._isolcpus = get_cores(ret[1])
                return self._isolcpus


class SystemdConfig(object):
    """Systemd configuration."""

    systemd_config = []

    def __init__(self):
        path = os.path.join(DATA_ROOT, "etc/systemd/system.conf")
        if os.path.exists(path):
            self.systemd_config = open(path, 'r').readlines()

        self._cpuaffinity = []

    @property
    def cpuaffinity(self):
        for line in self.systemd_config:
            expr = r'^CPUAffinity\s*=\s*([0-9\-,]+)\s*.*'
            ret = re.compile(expr).match(line)
            if ret:
                self._cpuaffinity = get_cores(ret[1])
                return self._cpuaffinity


class NUMAInfo(object):

    numactl = ""

    def __init__(self):
        if DATA_ROOT == '/':
            self.numactl = subprocess.check_output(['numactl', '--hardware'])
            self.numactl = self.numactl.decode('UTF-8').splitlines()
        else:
            path = os.path.join(DATA_ROOT,
                                "sos_commands/numa/numactl_--hardware")
            if os.path.exists(path):
                self.numactl = open(path, 'r').readlines()

        self._nodes = {}

    @property
    def nodes(self):
        """Returns dictionary of numa nodes and their associated list of cpu
           cores.
        """
        if self._nodes:
            return self._nodes

        node_ids = []
        for line in self.numactl:
            expr = r'^available:\s+[0-9]+\s+nodes\s+\(([0-9\-]+)\)'
            ret = re.compile(expr).match(line)
            if ret:
                p = ret[1].partition('-')
                if p[1] == '-':
                    node_ids = range(int(p[0]), int(p[2]) + 1)
                else:
                    node_ids = [int(p[0])]

                break

        for node in node_ids:
            for line in self.numactl:
                expr = r'^node\s+{}\s+cpus:\s([0-9\s]+)'.format(node)
                ret = re.compile(expr).match(line)
                if ret:
                    self._nodes[node] = [int(e) for e in ret[1].split()]
                    break

        return self._nodes

    def cores(self, node=None):
        """Returns list of cores for a given numa node.

        If no node id is provided, all cores from all numa nodes are returned.
        """
        return self.nodes.get(node)


class Results(object):
    def __init__(self):
        self.errors = {}
        self.errors_extras = {}
        self.info = {}
        self.info_extras = {}
        self.config = {}

    def add_config(self, application, key, value):
        """Save service/application config. This servces as a record of what
        we have used as a data source to cross-reference settings.
        """
        if not value:
            return

        if application in self.config:
            self.config[application][key] = value
        else:
            self.config[application] = {key: value}

    def add_info(self, msg, extra=None):
        """Add message to be displayed as INFO"""
        key = uuid4()
        self.info[key] = msg
        if extra:
            self.info_extras[key] = extra

    def add_error(self, msg, extra=None):
        """Add message to be displayed as ERROR"""
        key = uuid4()
        self.errors[key] = msg
        if extra:
            self.errors_extras[key] = extra

    def display(self):
        print("  cpu-pinning-checks:")
        print("    input:")
        for app in self.config:
            print("      {}:".format(app))
            for key in self.config[app]:
                print("        - {}: {}".format(key, self.config[app][key]))

        print("    results:")
        if not self.info and not self.errors:
            print("      - no issues found")
            return

        for key in self.info:
            msg = self.info[key]
            print("      - INFO: {}".format(msg))
            if OPENSTACK_SHOW_CPU_PINNING_RESULTS:
                for msg in self.info_extras[key].split('\n'):
                    print("        - {}".format(msg))

        for key in self.errors:
            msg = self.errors[key]
            print("      - ERROR: {}".format(msg))
            if OPENSTACK_SHOW_CPU_PINNING_RESULTS:
                for msg in self.errors_extras[key].split('\n'):
                    print("        - {}".format(msg))


class CPUPinningChecker(object):

    def __init__(self):
        self.numa = NUMAInfo()
        self.systemd = SystemdConfig()
        self.kernel = KernelConfig()
        self.openstack = OpenstackNovaConfig()
        self.results = Results()

        # >= Train
        if self.openstack.cpu_dedicated_set:
            self.cpu_dedicated_set = set(self.openstack.cpu_dedicated_set)
            self.cpu_dedicated_set_name = "cpu_dedicated_set"
        elif self.openstack.vcpu_pin_set:
            self.cpu_dedicated_set = set(self.openstack.vcpu_pin_set)
            self.cpu_dedicated_set_name = "vcpu_pin_set"

        self.cpu_shared_set = set(self.openstack.cpu_shared_set)
        self.isolcpus = set(self.kernel.isolcpus)
        self.cpuaffinity = set(self.systemd.cpuaffinity)

        self.results.add_config("nova", "cpu_dedicated_set",
                                list_to_str(self.openstack.cpu_dedicated_set))

        self.results.add_config("nova", "vcpu_pin_set",
                                list_to_str(self.openstack.vcpu_pin_set))

        self.results.add_config("nova", "cpu_shared_set",
                                list_to_str(self.openstack.cpu_shared_set))

        self.results.add_config("kernel", "isolcpus",
                                list_to_str(self.isolcpus))
        self.results.add_config("systemd", "cpuaffinity",
                                list_to_str(self.cpuaffinity))

        for node in self.numa.nodes:
            self.results.add_config("numa", "node{}".format(node),
                                    list_to_str(self.numa.cores(node)))

    def run_cpu_pinning_checks(self):
        """Perform a set of checks on Nova cpu pinning configuration to ensure
        it is setup as expected.
        """

        if self.cpu_dedicated_set:
            intersect1 = self.cpu_dedicated_set.intersection(self.isolcpus)
            intersect2 = self.cpu_dedicated_set.intersection(self.cpuaffinity)
            if intersect1:
                if intersect2:
                    extra = ("intersection with isolcpus: {}\nintersection "
                             "with cpuaffinity: {}".format(intersect1,
                                                           intersect2))
                    msg = ("{} is a subset of both isolcpus AND "
                           "cpuaffinity".format(self.cpu_dedicated_set_name))
                    self.results.add_error(msg, extra)
            elif intersect2:
                if intersect1:
                    extra = ("intersection with isolcpus: {}\nintersection "
                             "with cpuaffinity: {}".format(intersect1,
                                                           intersect2))
                    msg = ("{} is a subset of both isolcpus AND "
                           "cpuaffinity".format(self.cpu_dedicated_set_name))
                    self.results.add_error(msg, extra)
            else:
                msg = ("{} is neither a subset of isolcpus nor cpuaffinity".
                       format(self.cpu_dedicated_set_name))
                self.results.add_error(msg)

        intersect = self.cpu_shared_set.intersection(self.kernel.isolcpus)
        if intersect:
            extra = "intersection: {}".format(list_to_str(intersect))
            self.results.add_error("cpu_shared_set contains cores from "
                                   "isolcpus", extra)

        intersect = self.cpu_dedicated_set.intersection(self.cpu_shared_set)
        if intersect:
            extra = "intersection: {}".format(list_to_str(intersect))
            self.results.add_error("cpu_shared_set and cpu_dedicated_set "
                                   "overlap", extra)

        intersect = self.isolcpus.intersection(self.cpuaffinity)
        if intersect:
            extra = "intersection: {}".format(list_to_str(intersect))
            self.results.add_error("isolcpus and cpuaffinity overlap", extra)

        node_count = 0
        for node in self.numa.nodes:
            if self.cpu_dedicated_set.intersection(set(self.numa.cores(node))):
                node_count += 1

        if node_count > 1:
            extra = ""
            for node in self.numa.nodes:
                if extra:
                    extra += "\n"

                extra += "node{}: {}".format(node,
                                             list_to_str(
                                                 self.numa.cores(node)))

            extra += "\n{}: {}".format(self.cpu_dedicated_set_name,
                                       list_to_str(self.cpu_dedicated_set))

            self.results.add_info("{} has cores from > 1 numa node".
                                  format(self.cpu_dedicated_set_name), extra)

        total_isolated = self.isolcpus.union(self.cpuaffinity)
        nonisolated = set(total_isolated).intersection()
        if len(nonisolated) <= 4:
            self.results.add_error("Host has only {} cores unpinned. This "
                                   "might cause unintended performance "
                                   "problems".format(len(nonisolated)))

    def show_results(self):
        self.results.display()


if __name__ == "__main__":
    checker = CPUPinningChecker()
    checker.run_cpu_pinning_checks()
    checker.show_results()
