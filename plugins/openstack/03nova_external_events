#!/bin/bash -u

declare -a succeeded=()
declare -a output=()
event_indent="      ${INDENT_STR}"

all_stages_complete ()
{
    while (($#)); do
        $1 || return 1
        shift
    done
    return 0
}

((VERBOSITY_LEVEL>=2)) || exit 0

data_source=var/log/nova/nova-compute.log
if ! [ -r "$data_source" ]; then
    echo "  $data_source not found - skipping nova vif-plug-events info"
    exit 0
fi

get_events ()
{
    event_name=$1
    key="Preparing to wait for external event $event_name"
    if `grep -q "$key" $data_source`; then
        readarray -t events<<<`grep "$key" $data_source`
        for event in "${events[@]}"; do
            instance_id=`echo "$event"| sed -r 's/.+\[instance:\s+([[:alnum:]\-]+)\].+/\1/g'`
            readarray -t sequence<<<`egrep "instance: $instance_id.+ event $event_name" $data_source`
            declare -A stages=( [Preparing]=false [Received]=false [Processing]=false )
            for stage in ${!stages[@]}; do
                echo "${sequence[@]}"| grep -q "$stage" || break
                stages[$stage]=true
            done
            if all_stages_complete ${stages[@]}; then
                succeeded+=( "$instance_id" )
            else
                failed+=( "$instance_id" )
            fi
        done
    fi

    echo "    $event_name:"
    echo "      successful:"
    if ((${#succeeded[@]})); then
        for line in "${succeeded[@]}"; do
            echo "${event_indent}$line"
        done
    else
        echo "${event_indent}null"
    fi
    echo "      failed:"
    if ((${#failed[@]})); then
        for line in "${failed[@]}"; do
            echo "${event_indent}$line"
        done
    else
        echo "${event_indent}null"
    fi
}

echo "  os-server-external-events:"
# Supported events - https://docs.openstack.org/api-ref/compute/?expanded=run-events-detail#create-external-events-os-server-external-events
get_events "network-vif-plugged"

