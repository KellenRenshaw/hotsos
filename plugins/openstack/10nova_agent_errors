#!/usr/bin/python3
import os

from common import (
    constants,
    helpers,
    searchtools,
)
from openstack_common import (
    OPENSTACK_AGENT_ERROR_KEY_BY_TIME as AGENT_ERROR_KEY_BY_TIME,
    NOVA_LOGS,
)
from openstack_utils import (
    get_agent_exceptions,
)

NOVA_AGENT_ERROR_INFO = {}


def get_agents_exceptions():
    data_source_template = os.path.join(constants.DATA_ROOT, NOVA_LOGS,
                                        '{}.log')
    if constants.USE_ALL_LOGS:
        data_source_template = "{}*".format(data_source_template)

    agents = ["nova-compute", "nova-scheduler", "nova-conductor",
              "nova-api-os-compute", "nova-api-wsgi"]
    exc_types = ["DBConnectionError", "MessagingTimeout",
                 "AMQP server on .+ is unreachable",
                 "amqp.exceptions.ConnectionForced: .+",
                 "OSError: Server unexpectedly closed connection",
                 "ConnectionResetError: .+"]
    s = searchtools.FileSearcher()
    for agent in agents:
        data_source = data_source_template.format(agent)
        for exc_type in exc_types:
            s.add_search_term(r"^([0-9\-]+) (\S+) .+({}).*".format(exc_type),
                              [1, 2, 3], data_source, tag=agent)

    results = s.search()
    for agent in agents:
        e = get_agent_exceptions(results.find_by_tag(agent),
                                 AGENT_ERROR_KEY_BY_TIME)
        if e:
            NOVA_AGENT_ERROR_INFO[agent] = e


if __name__ == "__main__":
    get_agents_exceptions()
    if NOVA_AGENT_ERROR_INFO:
        NOVA_AGENT_ERROR_INFO = {"nova-agent-errors": NOVA_AGENT_ERROR_INFO}
        if not helpers.HOTSOSYaml.master_has_plugin("openstack"):
            NOVA_AGENT_ERROR_INFO = {"openstack": NOVA_AGENT_ERROR_INFO}
            indent = 0
        else:
            indent = 2

        helpers.HOTSOSYaml.dump(NOVA_AGENT_ERROR_INFO, indent=indent)
