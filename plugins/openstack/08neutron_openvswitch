#!/usr/bin/python3
import os

import statistics

from datetime import datetime

from common import (
    constants,
    helpers,
    searchtools,
)
from openstack_common import (
    NEUTRON_LOGS,
)

NEUTRON_OVS_AGENT_INFO = {}
MAX_RPC_LOOP_RESULTS = 5


def get_rpc_loop_too_long():
    rpc_loops = {}
    stats = {"min": 0,
             "max": 0,
             "stdev": 0,
             "avg": 0,
             "samples": []}

    s = searchtools.FileSearcher()
    if constants.USE_ALL_LOGS:
        data_source = os.path.join(constants.DATA_ROOT, NEUTRON_LOGS,
                                   'neutron-openvswitch-agent.log*')
    else:
        data_source = os.path.join(constants.DATA_ROOT, NEUTRON_LOGS,
                                   'neutron-openvswitch-agent.log')

    s.add_search_term(r"^([0-9\-]+) (\S+) .+ Agent rpc_loop - "
                      "iteration:([0-9]+) started.*", [1, 2, 3], data_source,
                      tag="rpc-loop-start")
    s.add_search_term(r"^([0-9\-]+) (\S+) .+ Agent rpc_loop - "
                      "iteration:([0-9]+) completed..+Elapsed:([0-9.]+).+",
                      [1, 2, 3, 4], data_source, tag="rpc-loop-end")
    results = s.search()

    for result in results.find_by_tag("rpc-loop-end"):
        day = result.get(1)
        secs = result.get(2)
        iteration = int(result.get(3))
        duration = float(result.get(4))
        # iteration ids get reset when agent is restarted so need to do
        # this for it to be unique.
        iteration_key = "{}_{}".format(os.path.basename(result.source),
                                       iteration)
        end = "{} {}".format(day, secs)
        end = datetime.strptime(end, "%Y-%m-%d %H:%M:%S.%f")
        rpc_loops[iteration_key] = {"end": end,
                                    "duration": duration}

    for result in results.find_by_tag("rpc-loop-start"):
        day = result.get(1)
        secs = result.get(2)
        iteration = int(result.get(3))
        start = "{} {}".format(day, secs)
        start = datetime.strptime(start, "%Y-%m-%d %H:%M:%S.%f")
        iteration_key = "{}_{}".format(os.path.basename(result.source),
                                       iteration)
        if iteration_key in rpc_loops:
            stats['samples'].append(rpc_loops[iteration_key]["duration"])
            rpc_loops[iteration_key]["start"] = start

    if not rpc_loops:
        return

    count = 0
    top_n = {}
    top_n_sorted = {}

    for k, v in sorted(rpc_loops.items(),
                       key=lambda x: x[1].get("duration", 0),
                       reverse=True):
        if count >= MAX_RPC_LOOP_RESULTS:
            break

        count += 1
        top_n[k] = v

    for k, v in sorted(top_n.items(), key=lambda x: x[1]["start"],
                       reverse=True):
        iteration = int(k.partition('_')[2])
        top_n_sorted[iteration] = {"start": v["start"],
                                   "end": v["end"],
                                   "duration": v["duration"]}

    stats['min'] = round(min(stats['samples']), 2)
    stats['max'] = round(max(stats['samples']), 2)
    stats['stdev'] = round(statistics.pstdev(stats['samples']), 2)
    stats['avg'] = round(statistics.mean(stats['samples']), 2)
    num_samples = len(stats['samples'])
    stats['samples'] = num_samples

    NEUTRON_OVS_AGENT_INFO["rpc-loop"] = {"top": top_n_sorted,
                                          "stats": stats}


if __name__ == "__main__":
    get_rpc_loop_too_long()
    if NEUTRON_OVS_AGENT_INFO:
        NEUTRON_OVS_AGENT_INFO = {"neutron-ovs-agent": NEUTRON_OVS_AGENT_INFO}
        if not helpers.HOTSOSYaml.master_has_plugin("openstack"):
            NEUTRON_OVS_AGENT_INFO = {"openstack": NEUTRON_OVS_AGENT_INFO}
            indent = 0
        else:
            indent = 2

        helpers.HOTSOSYaml.dump(NEUTRON_OVS_AGENT_INFO, indent=indent)
