#!/bin/bash -u
# This plugin displays information about Ceph.

ceph_pg_imbalance ()
{
    # upstream recommends 50-100 OSDs ideally.
    local bad_pgs=$(get_ceph_osd_df_tree | awk '$NF ~ "^osd."{ pg=$(NF-1); if (pg > 0 && (pg < 50 || pg > 120)) printf "%s ", pg }')

    if [[ -n $bad_pgs ]]; then
        echo "ceph-pgs: WARNING! Found OSDs with pg counts [$bad_pgs]. Recommended range is 50 - 100."
    fi
}

ceph_versions_mismatch ()
{
    # Check versions of all running daemons are the same.
    local count=$(get_ceph_versions | awk -F' ' '/ceph version/{arr[$3]=1}END{ c=0; for (i in arr) c++; print c}')
    if [[ $count > 1 ]]; then
        echo "ceph-versions: WARNING! Found multiple ($count different) versions of daemons running."
    fi
}


declare -a output=()
services=(
    ceph-osd
    ceph-mon
    ceph-mgr
    radosgw
)

echo "storage:"

sos_time_secs=$(get_sosreport_time)

for svc in ${services[@]}; do
    exists="`get_ps| sed -r \"s/.*(${svc}[[:alnum:]\-]*)\s+.+/\1/g;t;d\"| sort -u| sed -r 's/^\s+/  /g'`"
    [ -z "$exists" ] && continue

    ids="`get_ps| sed -r \"s/.*(${svc}[[:alnum:]\-]*)\s+.+--id\s+([[:digit:]]+)\s+.+/\2/g;t;d\"| tr -s '\n' ','| sort| sed -r -e 's/^\s+/  /g' -e 's/,$//g'`"

    [[ -n $ids ]] && output+=( "    osds:" )

    for osd_id in `echo $ids| tr ',' ' '`;do
        out_str="      $osd_id:"

        offset=`get_ceph_volume_lvm_list | egrep -n "==== osd.$osd_id ====" | cut -f1 -d:`
        if [ -n "$offset" ]; then
            osd_fsid=`get_ceph_volume_lvm_list | tail -n+$offset | grep -m1 "osd fsid" | sed -r 's/.+\s+([[:alnum:]]+)/\1/g'`
            osd_device=`get_ceph_volume_lvm_list | tail -n+$offset | grep -m1 "devices" | sed -r 's/.+\s+([[:alnum:]\/]+)/\1/g'`
            out_str="$out_str\n        dev: $osd_device\n        fsid: $osd_fsid"
        else
            declare -a arr=($(get_lvm2_lvs |
                              awk -v id="osd_id=$osd_id" '/osd_fsid=/ && $0 ~ id {
                              match($0, /osd_fsid=([^,]+)/); a=substr($0, RSTART+1, RLENGTH-1);
                              split($NF, b, "("); print a, b[1]; exit }'))
            [[ ${#arr[@]} == 2 ]] && out_str="$out_str\n        dev: ${arr[1]}\n        fsid: ${arr[0]}"
        fi

        if ((VERBOSITY_LEVEL>=1)); then
            # OSD's Resident memory size
            osd_RSS=$(get_ps | awk -v id="--id $osd_id " '/ceph-osd/ && $0 ~ id {print int($6/1024); exit}')
            out_str="$out_str\n        RSS: ${osd_RSS}M"

            # OSD's uptime (time since it was started)
            osd_start="$(get_ps_axo_flags | awk -v id="--id $osd_id" '/ceph-osd/ && $0 ~ id {print $13, $14, $15, $16, $17; exit}')"
            if [[ $sos_time_secs -gt 0 && -n "$osd_start" ]]; then
                osd_start_secs=$(date --date="${osd_start}" +%s)
                osd_uptime_secs=$((sos_time_secs - osd_start_secs))
                osd_uptime_str="$(seconds_to_date $osd_uptime_secs)"
                out_str="$out_str\n        etime: $osd_uptime_str"
            fi
        fi

        if ((VERBOSITY_LEVEL>=3)); then
            osd_devtype=$(get_ceph_osd_tree | awk -v id="$osd_id" '$4=="osd."id{print $2; exit}')
            [[ -n $osd_devtype ]] && out_str="$out_str\n        type: $osd_devtype"
        fi

        output+=( "$out_str" )
    done
done

pgs_imbalanced="$(ceph_pg_imbalance)"
[[ -n $pgs_imbalanced ]] && output+=( "$pgs_imbalanced" )

vers="$(ceph_versions_mismatch)"
[[ -n $vers ]] && output+=( "$vers" )

if ((${#output[@]})); then
    echo "  ceph:"
    for line in "${output[@]}"; do
        echo -e "$line"
    done
fi

