#!/usr/bin/python3
import re
import os
import subprocess

from common import helpers

# HOTSOS GLOBALS
VERBOSITY_LEVEL = int(os.environ.get('VERBOSITY_LEVEL', 0))
DATA_ROOT = os.environ.get('DATA_ROOT', '/')

SERVICES = ["ceph-osd",
            "ceph-mon",
            "ceph-mgr",
            "radosgw"]

OSD_INFO = {}


# TODO: finish converting these
def ceph_pg_imbalance():
    """
    ## upstream recommends 50-100 OSDs ideally.
    #for line in helpers.get_ceph_osd_df_tree():
    #    bad_pgs=$( | awk '$NF ~ "^osd."{ pg=$(NF-1); if (pg > 0 && (pg < 50
    #    || pg > 120)) printf "%s ", pg }')
    #    if bad_pgs:
    #        print("ceph-pgs: WARNING! Found OSDs with pg counts [$bad_pgs].
    #    Recommended range is 50 - 100.")
    """


def ceph_versions_mismatch():
    """
    ## Check versions of all running daemons are the same.
    #for line in helpers.get_ceph_versions():
    #    local count=$( | awk -F' ' '/ceph version/{arr[$3]=1}END{ c=0; for
    #    (i in arr) c++; print c}')
    #    if count > 1:
    #        print("ceph-versions: WARNING! Found multiple ($count different)
    #    versions of daemons running.")
    """


def svc_exists(svc):
    for line in helpers.get_ps():
        ret = re.compile(r".+({}\S*)\s+.+".format(svc)).match(line)
        if ret:
            return True


def get_osd_ids(svc):
    osd_ids = []
    for line in helpers.get_ps():
        ret = re.compile(r".+({}\S*)\s+.*--id\s+([0-9]+)\s+.+"
                         .format(svc)).match(line)
        if ret:
            osd_ids.append(ret[2])

    return osd_ids


def seconds_to_date(secs):
    days = secs / 86400
    hours = secs / 3600 % 24
    mins = secs / 60 % 60
    secs = secs % 60

    return '{}d:{}h:{}m:{}s'.format(int(days), int(hours),
                                    int(mins), int(secs))


def get_osd_info():
    sos_time_secs = helpers.get_sosreport_time()
    ceph_volume_lvm_list = helpers.get_ceph_volume_lvm_list()

    for svc in SERVICES:
        if not svc_exists(svc):
            continue

        for osd_id in get_osd_ids(svc):
            OSD_INFO[osd_id] = {}
            if ceph_volume_lvm_list:
                for i, line in enumerate(ceph_volume_lvm_list):
                    ret = re.compile(".*==== osd.{} ====.*".format(osd_id)
                                     ).match(line)
                    if ret:
                        OSD_INFO[osd_id]['mark'] = 1

                    if OSD_INFO[osd_id].get('mark') is None:
                        continue

                    ret = re.compile(r"\s+osd fsid\s+([a-z0-9]+)\s+"
                                     ).search(line)
                    if ret:
                        OSD_INFO[osd_id]["fsid"] = ret[1]

                    ret = re.compile(r"\s+devices\s+([\S]+)\s+").search(line)
                    if ret:
                        OSD_INFO[osd_id]["dev"] = ret[1]
                        break

            if 'mark' in OSD_INFO[osd_id]:
                del OSD_INFO[osd_id]['mark']

            if VERBOSITY_LEVEL >= 1:
                for line in helpers.get_ps():
                    ret = re.compile(r".+/ceph-osd\s+.+--id {}\s+.+".format(
                                     osd_id)).match(line)
                    if ret:
                        rss = int(int(line.split()[5]) / 1024)
                        OSD_INFO[osd_id]["rss"] = "{}M".format(rss)
                        break

                for line in helpers.get_ps_axo_flags():
                    ret = re.compile(r".+/ceph-osd\s+.+--id {}\s+.+".format(
                                     osd_id)).match(line)
                    if ret:
                        osd_start = ' '.join(line.split()[13:17])
                        if sos_time_secs and osd_start:
                            cmd = ["date", "--date={}".format(osd_start),
                                   "+%s"]
                            osd_start_secs = subprocess.check_output(cmd)
                            osd_uptime_secs = (int(sos_time_secs) -
                                               int(osd_start_secs))
                            osd_uptime_str = seconds_to_date(osd_uptime_secs)
                            OSD_INFO[osd_id]["etime"] = osd_uptime_str
                            break

            if VERBOSITY_LEVEL >= 3:
                ceph_osd_tree = helpers.get_ceph_osd_tree()
                if ceph_osd_tree:
                    for line in helpers.get_ceph_osd_tree():
                        if line.split()[3] == "osd.{}".format(osd_id):
                            OSD_INFO[osd_id]["devtype"] = line.split()[1]
                            break


if __name__ == "__main__":
    print("storage:")

    get_osd_info()
    if OSD_INFO:
        print("  ceph:")
        print("    osds:")
        for osd in OSD_INFO:
            print("      {}:".format(osd))
            for key in OSD_INFO[osd]:
                print("        {}: {}".format(key, OSD_INFO[osd][key]))

        ceph_pg_imbalance()
        ceph_versions_mismatch()
