#!/usr/bin/python3
import re
import os

from common import helpers

# HOTSOS GLOBALS
VERBOSITY_LEVEL = int(os.environ.get('VERBOSITY_LEVEL', 0))
DATA_ROOT = os.environ.get('DATA_ROOT', '/')

SERVICES = ["etcdctl",
            "calicoctl",
            "kubectl2",
            "kubelet",
            "containerd-shim",
            "containerd",
            "dockerd"]

SNAPS = [r'charm[\S]+',
         r'conjure-up',
         r'core[0-9]*',
         r'cdk-addons',
         r'docker',
         r'go',
         r'helm',
         r'kubernetes-[\S]+',
         r'kubeproxy',
         r'kubectl',
         r'kubelet',
         r'kubeadm',
         r'kubefed',
         r'vault',
         ]


print("kubernetes:")

print("  services:")
ps_output = helpers.get_ps()
if not ps_output:
    print("    - process info unavailable")
else:
    service_info = {}

    for svc in SERVICES:
        for line in ps_output:
            ret = re.compile(r".+({})\s+.+".format(svc)).match(line)
            if ret:
                if svc in service_info:
                    service_info[svc] += 1
                else:
                    service_info[svc] = 1

    for svc in service_info:
        print("    - {} ({})".format(svc, service_info[svc]))

print("  snaps:")
snap_list_all = helpers.get_snap_list_all()
snap_info = {}
if snap_list_all:
    for line in snap_list_all:
        for snap in SNAPS:
            ret = re.compile(r"^({})\s+([\S]+)\s+.+".format(snap)).match(line)
            if ret:
                # only show latest version installed
                if ret[1] in snap_info:
                    if ret[2] > snap_info[ret[1]]:
                        snap_info[ret[1]] = ret[2]
                else:
                    snap_info[ret[1]] = ret[2]

    for snap in snap_info:
        print("    - {} {}".format(snap, snap_info[snap]))

print("  pods:")
pods_path = os.path.join(DATA_ROOT, "var/log/pods")
if os.path.exists(pods_path):
    for pod in os.listdir(pods_path):
        print("    - {}".format(pod))

print("  containers:")
containers_path = os.path.join(DATA_ROOT, "var/log/containers")
if os.path.exists(containers_path):
    for container in os.listdir(containers_path):
        print("    - {}".format(container))
