#!/bin/bash -u
# This plugin displays information about the kernel.

echo "kernel:"

path=${DATA_ROOT}proc/cmdline
if [ -e "$path" ]; then
    cat $path|xargs -l -I{} echo "${INDENT_STR}{}"
else
    echo "${INDENT_STR}$path not found"
fi

# TODO: consider available zones in /proc/pagetypeinfo
#path=${DATA_ROOT}proc/pagetypeinfo
#if [ -e "$data_source" ]; then
#    cat $data_source | egrep "zone\s+Normal,"| sed -r 's/\s+/ /g'
#fi

echo "${INDENT_STR}memory:"


INDENT_STR="    $INDENT_STR"

check_mallocinfo ()
{
    local node="$1"
    local verbose=${2:-0}
    local tally=0
    local high_order_seq=0
    local stop=false

    ((verbose)) && echo "${sub_indent_str}zones:"
    for zone in {10..0}; do
        free=`awk '$4=="Normal"' ${DATA_ROOT}proc/buddyinfo| grep "Node $node,"| sed -r 's/\s+/ /g'| cut -d ' ' -f $((5+$zone))`
        ((verbose)) && echo "  ${sub_indent_str}$zone: $free"
        ((free)) || ((tally+=$zone))
        ((free)) && stop=true
        $stop || ((high_order_seq++))
    done
    ((tally>50)) && ((high_order_seq>1)) && return 1
    ((high_order_seq>5)) && return 1
    return 0
}
readarray -t nodes<<<"`sed -rn 's/Node\s+([0-9]+).+/\1/p' ${DATA_ROOT}proc/buddyinfo| sort -u`"
zone_issue_found=false

sub_indent_str="  $INDENT_STR"
for node in ${nodes[@]}; do
    check_mallocinfo $node
    if (($?)); then
        echo "      node$node:"
        zone_issue_found=true
        echo "${sub_indent_str}WARNING: node $node has limited high order memory - check ${DATA_ROOT}proc/buddyinfo"
        check_mallocinfo $node 1
    fi
done

# We only report on compaction errors if there is a shortage of high-order zones
if $zone_issue_found; then
    fail_count=`awk '$1=="compact_fail" {print $2}' ${DATA_ROOT}proc/vmstat`
    success_count=`awk '$1=="compact_success" {print $2}' ${DATA_ROOT}proc/vmstat`
    # we use an arbitrary threshold of 10k to suggest that a lot of compaction has
    # occured but noting that this is a rolling counter and is not necessarily
    # representative of current state.
    if ((success_count>10000)); then
        pcent=$((fail_count/(success_count/100)))
        if ((pcent>10)); then
            echo "${INDENT_STR}WARNING: compaction failures are at $pcent% of successes (see ${DATA_ROOT}proc/vmstat)"
        fi
    fi
else
    echo "${INDENT_STR}zones checked, no issues found"
fi

echo -e "systemd:"
path=${DATA_ROOT}sos_commands/systemd/systemctl_show_service_--all
if [ -e "$path" ]; then
    if `egrep -q "CPUAffinity=.+" $path`; then
        egrep "CPUAffinity=.+" $path| sort -u|xargs -l -I{} echo "${INDENT_STR}{}" 
    else
        echo "${INDENT_STR}CPUAffinity not set" 
    fi
else
    echo "${INDENT_STR}null"
fi

